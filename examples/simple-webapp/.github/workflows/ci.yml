name: 'CI - Simple Web App'

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  SOLUTION_PATH: './src/SimpleWebApp.sln'
  ARTIFACT_NAME: 'simple-webapp'

jobs:
  # Determine environment based on branch
  setup:
    name: 'Setup'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      should-deploy: ${{ steps.determine-env.outputs.should-deploy }}
    steps:
      - name: Determine environment
        id: determine-env
        run: |
          case "${{ github.ref_name }}" in
            main)
              echo "environment=prod" >> $GITHUB_OUTPUT
              echo "should-deploy=false" >> $GITHUB_OUTPUT  # CI only, CD handles deployment
              ;;
            develop)
              echo "environment=dev" >> $GITHUB_OUTPUT
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              ;;
            release/*)
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "environment=dev" >> $GITHUB_OUTPUT
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              ;;
          esac
          echo "🎯 Target environment: $(echo $environment)"

  # Call the reusable CI workflow
  ci-build:
    name: 'CI Build'
    needs: setup
    uses: ./.github/workflows/ci/build-dotnet.yml
    with:
      solution-path: ${{ env.SOLUTION_PATH }}
      dotnet-version: '8.0.x'
      build-configuration: 'Release'
      run-tests: true
      run-security-scan: true
      publish-artifacts: true
      artifact-name: ${{ env.ARTIFACT_NAME }}
      environment: ${{ needs.setup.outputs.environment }}
      nuget-config-path: './nuget.config'
    secrets:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # Additional job for integration tests (if needed)
  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [setup, ci-build]
    if: github.event_name == 'pull_request' || github.ref_name == 'develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: ./.github/actions/setup-dotnet
        with:
          dotnet-version: '8.0.x'

      - name: Run integration tests
        run: |
          echo "🧪 Running integration tests..."
          dotnet test ./tests/SimpleWebApp.IntegrationTests \
            --configuration Release \
            --logger trx \
            --collect:"XPlat Code Coverage"

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results-${{ github.run_number }}
          path: ./TestResults
          retention-days: 7

  # Performance/Load testing (optional)
  performance-tests:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    needs: [setup, ci-build]
    if: github.ref_name == 'main' || github.ref_name == 'develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}-${{ github.run_number }}
          path: ./artifacts

      - name: Run performance tests
        run: |
          echo "⚡ Running performance tests..."
          # Add your performance testing commands here
          # For example: k6, NBomber, Artillery, etc.

  # Code quality gate
  quality-gate:
    name: 'Quality Gate'
    runs-on: ubuntu-latest
    needs: [ci-build, integration-tests]
    if: always()
    steps:
      - name: Check quality gate
        run: |
          if [ "${{ needs.ci-build.result }}" != "success" ]; then
            echo "❌ CI Build failed"
            exit 1
          fi
          
          if [ "${{ needs.integration-tests.result }}" == "failure" ]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          echo "✅ Quality gate passed"

  # Summary job
  summary:
    name: 'Summary'
    runs-on: ubuntu-latest
    needs: [setup, ci-build, integration-tests, quality-gate]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 🚀 CI Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CI Build | ${{ needs.ci-build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || needs.integration-tests.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | ${{ needs.quality-gate.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Artifact:** ${{ env.ARTIFACT_NAME }}-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY